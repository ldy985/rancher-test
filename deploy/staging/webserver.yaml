apiVersion: v1
kind: ConfigMap
metadata:
  name: webapp-config-staging
  namespace: team
  labels:
    app: rf-team-webapp-staging
data:
  MYSQL__PORT: 1234
---
# This exposes the webapp internally in the cluster at rf-team-webapp-staging-service.team.svc.cluster.local but it also exposes the webapp to the ingress service.
kind: Service
apiVersion: v1
metadata:
  name: rf-team-webapp-staging-service
  namespace: team
spec:
  selector:
    app: rf-team-webapp-staging
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# This is the actual deployment, it specifies which container and how many to run.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rf-team-webapp-staging
  namespace: team
  labels:
    app: rf-team-webapp-staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rf-team-webapp-staging
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rf-team-webapp-staging
    spec:
      containers:
      - envFrom:
      # Here we import the previously defined config maps. They are imported as environment variable but can also be imported as files.
        - configMapRef:
            name: web-config-base-staging
            optional: false
        - configMapRef:
            name: webenv-config-staging
            optional: false
        - configMapRef:
            name: webapp-config-base-staging
            optional: false
        - configMapRef:
            name: webapp-config-staging
            optional: false
        name: rf-team-webapp-staging
        image: index.docker.io/rfit/images:rf-team-webapp-staging-latest
        imagePullPolicy: IfNotPresent
        # Here we tell kubernetes that it should send a HTTP request to / to see if the webserver is up.
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 2
        ports:
          - containerPort: 80
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 2
          successThreshold: 2
          timeoutSeconds: 2
        # It is important to specify how many resources the container is expected to use. see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu
        resources:
          limits:
            cpu: 500m
            memory: 300M
          requests:
            cpu: 50m
            memory: 100M
---
# Exposes the webapp service on team-webapp-staging.rfit.dk and redirects to https
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: rf-team-webapp-staging-ingress
  namespace: team
  labels:
    app: rf-team-webapp-staging
  annotations:
    traefik.ingress.kubernetes.io/redirect-entry-point: https
spec:
  rules:
    - host: team-webapp-staging.rfit.dk
      http:
        paths:
          - backend:
              serviceName: rf-team-webapp-staging-service
              servicePort: 80
